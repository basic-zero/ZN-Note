package GUI;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Color;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.io.*;
import java.nio.file.Files;
import java.util.List;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Gia Nguyen
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    private Boolean isSaved = false;
    private File filePresent = new File("Untitled.txt");
    private JFileChooser fileChooser = new JFileChooser();
    private Vector<String> stackUndo = new Vector<String>();
    private int postion = 0;

    public Main() {
        initComponents();
        addFontName();
        cbbFont.setSelectedItem(taMain.getFont().getSize());
        this.setTitle(filePresent.getName() + "-Fake Notepad");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Text Document", "txt"));
        taMain.setBackground(Color.WHITE);
        Thread undoThread = new Thread(new Runnable() {
            @Override
            public void run() {

                while (true) {
                    String current = new String();
                    if (!taMain.getText().isEmpty()) {
                        current += taMain.getText();
                    } else {
                        current += "A$A";
                    }
                    current += "/*-*/" + taMain.getFont().getFontName() + "/*-*/" + taMain.getFont().getStyle() + "/*-*/" + taMain.getFont().getSize();
                    current += "/*-*/" + taMain.getBackground().getRed() + "/*-*/" + taMain.getBackground().getGreen() + "/*-*/" + taMain.getBackground().getBlue();
                    current += "/*-*/" + taMain.getForeground().getRed() + "/*-*/" + taMain.getForeground().getGreen() + "/*-*/" + taMain.getForeground().getBlue();
                    if (stackUndo.isEmpty()) {
                        stackUndo.add(postion, current);
                        postion++;
                    } else {
                        if (!current.equals(stackUndo.get(postion - 1))) {
                            stackUndo.add(postion, current);
                            postion++;
                            for (int i = postion; i < stackUndo.size(); i++) {
                                stackUndo.remove(i);
                            }
                        }
                    }
                    if (postion != 1) {
                        mniUndo.setEnabled(true);
                        pmniUndo.setEnabled(true);
                    } else {
                        mniUndo.setEnabled(false);
                        pmniUndo.setEnabled(false);
                    }
                    if (postion == stackUndo.size()) {
                        mniRedo.setEnabled(false);
                        pmniRedo.setEnabled(false);
                    } else {
                        mniRedo.setEnabled(true);
                        pmniRedo.setEnabled(true);
                    }
                    mniDelete.setEnabled(taMain.getSelectedText() != null);
                    pmniDelete.setEnabled(taMain.getSelectedText() != null);
                    if (taMain.getSelectedText() != null) {
                        mniCopy.setEnabled(true);
                        mniCut.setEnabled(true);
                        pmniCopy.setEnabled(true);
                        pmniCut.setEnabled(true);
                    } else {
                        mniCopy.setEnabled(false);
                        mniCut.setEnabled(false);
                        pmniCopy.setEnabled(false);
                        pmniCut.setEnabled(false);
                    }
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        undoThread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pmnMain = new javax.swing.JPopupMenu();
        pmniUndo = new javax.swing.JMenuItem();
        pmniRedo = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        pmniCut = new javax.swing.JMenuItem();
        pmniCopy = new javax.swing.JMenuItem();
        pmniPaste = new javax.swing.JMenuItem();
        pmniDelete = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        pmniFindAndReplace = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        pmniSelectAll = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taMain = new javax.swing.JTextArea();
        tbFont = new javax.swing.JToolBar();
        cbbFont = new javax.swing.JComboBox<>();
        cbbFontSize = new javax.swing.JComboBox<>();
        tbtnBold = new javax.swing.JToggleButton();
        tbtnItalic = new javax.swing.JToggleButton();
        mbMain = new javax.swing.JMenuBar();
        mnFile = new javax.swing.JMenu();
        mniNew = new javax.swing.JMenuItem();
        mniOpen = new javax.swing.JMenuItem();
        mniSave = new javax.swing.JMenuItem();
        mniSaveAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mniExit = new javax.swing.JMenuItem();
        mnEdit = new javax.swing.JMenu();
        mniUndo = new javax.swing.JMenuItem();
        mniRedo = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mniCut = new javax.swing.JMenuItem();
        mniCopy = new javax.swing.JMenuItem();
        mniPaste = new javax.swing.JMenuItem();
        mniDelete = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mniFindAndReplace = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        mniSelectAll = new javax.swing.JMenuItem();
        mnFormat = new javax.swing.JMenu();
        mniFont = new javax.swing.JCheckBoxMenuItem();
        mniWordWrap = new javax.swing.JCheckBoxMenuItem();
        mniTextColor = new javax.swing.JMenuItem();
        mniBacgroundColor = new javax.swing.JMenuItem();

        pmnMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pmnMainMouseClicked(evt);
            }
        });

        pmniUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        pmniUndo.setMnemonic('u');
        pmniUndo.setText("Undo");
        pmniUndo.setEnabled(false);
        pmniUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniUndoActionPerformed(evt);
            }
        });
        pmnMain.add(pmniUndo);

        pmniRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        pmniRedo.setMnemonic('r');
        pmniRedo.setText("Redo");
        pmniRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniRedoActionPerformed(evt);
            }
        });
        pmnMain.add(pmniRedo);
        pmnMain.add(jSeparator5);

        pmniCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        pmniCut.setMnemonic('t');
        pmniCut.setText("Cut");
        pmniCut.setEnabled(false);
        pmniCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniCutActionPerformed(evt);
            }
        });
        pmnMain.add(pmniCut);

        pmniCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        pmniCopy.setMnemonic('c');
        pmniCopy.setText("Copy");
        pmniCopy.setEnabled(false);
        pmniCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniCopyActionPerformed(evt);
            }
        });
        pmnMain.add(pmniCopy);

        pmniPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pmniPaste.setMnemonic('p');
        pmniPaste.setText("Paste");
        pmniPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniPasteActionPerformed(evt);
            }
        });
        pmnMain.add(pmniPaste);

        pmniDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        pmniDelete.setMnemonic('l');
        pmniDelete.setText("Delete");
        pmniDelete.setEnabled(false);
        pmniDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniDeleteActionPerformed(evt);
            }
        });
        pmnMain.add(pmniDelete);
        pmnMain.add(jSeparator6);

        pmniFindAndReplace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        pmniFindAndReplace.setMnemonic('F');
        pmniFindAndReplace.setText("Find and Replace");
        pmniFindAndReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniFindAndReplaceActionPerformed(evt);
            }
        });
        pmnMain.add(pmniFindAndReplace);
        pmnMain.add(jSeparator7);

        pmniSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        pmniSelectAll.setMnemonic('a');
        pmniSelectAll.setText("Select All");
        pmniSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmniSelectAllActionPerformed(evt);
            }
        });
        pmnMain.add(pmniSelectAll);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridBagLayout());

        taMain.setColumns(20);
        taMain.setRows(5);
        taMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                taMainMouseClicked(evt);
            }
        });
        taMain.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                taMainKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(taMain);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 311;
        gridBagConstraints.ipady = 158;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane2, gridBagConstraints);

        tbFont.setFloatable(false);
        tbFont.setRollover(true);
        tbFont.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbFontMouseClicked(evt);
            }
        });

        cbbFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbFontActionPerformed(evt);
            }
        });
        tbFont.add(cbbFont);

        cbbFontSize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72" }));
        cbbFontSize.setSelectedIndex(4);
        cbbFontSize.setToolTipText("");
        cbbFontSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbFontSizeActionPerformed(evt);
            }
        });
        tbFont.add(cbbFontSize);

        tbtnBold.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        tbtnBold.setText(" B ");
        tbtnBold.setFocusable(false);
        tbtnBold.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbtnBold.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbtnBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtnBoldActionPerformed(evt);
            }
        });
        tbFont.add(tbtnBold);

        tbtnItalic.setFont(new java.awt.Font("Times New Roman", 2, 14)); // NOI18N
        tbtnItalic.setText("  I  ");
        tbtnItalic.setFocusable(false);
        tbtnItalic.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbtnItalic.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbtnItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtnItalicActionPerformed(evt);
            }
        });
        tbFont.add(tbtnItalic);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(tbFont, gridBagConstraints);

        mbMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mbMainMouseClicked(evt);
            }
        });

        mnFile.setMnemonic('f');
        mnFile.setText("File");
        mnFile.setToolTipText("");

        mniNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mniNew.setMnemonic('N');
        mniNew.setText("New");
        mniNew.setToolTipText("");
        mniNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniNewActionPerformed(evt);
            }
        });
        mnFile.add(mniNew);

        mniOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mniOpen.setMnemonic('O');
        mniOpen.setText("Open");
        mniOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniOpenActionPerformed(evt);
            }
        });
        mnFile.add(mniOpen);

        mniSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mniSave.setMnemonic('S');
        mniSave.setText("Save");
        mniSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveActionPerformed(evt);
            }
        });
        mnFile.add(mniSave);

        mniSaveAs.setMnemonic('A');
        mniSaveAs.setText("Save As");
        mniSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveAsActionPerformed(evt);
            }
        });
        mnFile.add(mniSaveAs);
        mnFile.add(jSeparator1);

        mniExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        mniExit.setMnemonic('x');
        mniExit.setText("Exit");
        mniExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExitActionPerformed(evt);
            }
        });
        mnFile.add(mniExit);

        mbMain.add(mnFile);

        mnEdit.setMnemonic('e');
        mnEdit.setText("Edit");

        mniUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        mniUndo.setMnemonic('u');
        mniUndo.setText("Undo");
        mniUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniUndoActionPerformed(evt);
            }
        });
        mnEdit.add(mniUndo);

        mniRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        mniRedo.setMnemonic('r');
        mniRedo.setText("Redo");
        mniRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRedoActionPerformed(evt);
            }
        });
        mnEdit.add(mniRedo);
        mnEdit.add(jSeparator2);

        mniCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        mniCut.setMnemonic('t');
        mniCut.setText("Cut");
        mniCut.setEnabled(false);
        mniCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniCutActionPerformed(evt);
            }
        });
        mnEdit.add(mniCut);

        mniCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        mniCopy.setMnemonic('c');
        mniCopy.setText("Copy");
        mniCopy.setEnabled(false);
        mniCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniCopyActionPerformed(evt);
            }
        });
        mnEdit.add(mniCopy);

        mniPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        mniPaste.setMnemonic('p');
        mniPaste.setText("Paste");
        mniPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniPasteActionPerformed(evt);
            }
        });
        mnEdit.add(mniPaste);

        mniDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        mniDelete.setMnemonic('l');
        mniDelete.setText("Delete");
        mniDelete.setEnabled(false);
        mniDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDeleteActionPerformed(evt);
            }
        });
        mnEdit.add(mniDelete);
        mnEdit.add(jSeparator3);

        mniFindAndReplace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        mniFindAndReplace.setMnemonic('F');
        mniFindAndReplace.setText("Find and Replace");
        mniFindAndReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniFindAndReplaceActionPerformed(evt);
            }
        });
        mnEdit.add(mniFindAndReplace);
        mnEdit.add(jSeparator4);

        mniSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        mniSelectAll.setMnemonic('a');
        mniSelectAll.setText("Select All");
        mniSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSelectAllActionPerformed(evt);
            }
        });
        mnEdit.add(mniSelectAll);

        mbMain.add(mnEdit);

        mnFormat.setMnemonic('o');
        mnFormat.setText("Format");

        mniFont.setMnemonic('f');
        mniFont.setSelected(true);
        mniFont.setText("Font Bar");
        mniFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniFontActionPerformed(evt);
            }
        });
        mnFormat.add(mniFont);

        mniWordWrap.setText("Word Wrap");
        mniWordWrap.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mniWordWrapStateChanged(evt);
            }
        });
        mnFormat.add(mniWordWrap);

        mniTextColor.setMnemonic('t');
        mniTextColor.setText("Text Color");
        mniTextColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniTextColorActionPerformed(evt);
            }
        });
        mnFormat.add(mniTextColor);

        mniBacgroundColor.setMnemonic('b');
        mniBacgroundColor.setText("Background Color");
        mniBacgroundColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniBacgroundColorActionPerformed(evt);
            }
        });
        mnFormat.add(mniBacgroundColor);

        mbMain.add(mnFormat);

        setJMenuBar(mbMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 773, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Boolean openFromFile() {
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            filePresent = fileChooser.getSelectedFile();
            try {
                List<String> lines = Files.readAllLines(filePresent.toPath());
                taMain.setText("");
                int i;
                for (i = 0; i < lines.size() - 2; i++) {
                    taMain.setText(taMain.getText() + lines.get(i) + "\n");
                }

                taMain.setText(taMain.getText() + lines.get(i));
                i++;
                StringTokenizer tokenizer = new StringTokenizer(lines.get(i), "/*-*/");
                Font font = new Font(tokenizer.nextToken(), Integer.parseInt(tokenizer.nextToken()), Integer.parseInt(tokenizer.nextToken()));
                taMain.setFont(font);
                taMain.setBackground(new Color(Integer.parseInt(tokenizer.nextToken()), Integer.parseInt(tokenizer.nextToken()), Integer.parseInt(tokenizer.nextToken())));
                taMain.setForeground(new Color(Integer.parseInt(tokenizer.nextToken()), Integer.parseInt(tokenizer.nextToken()), Integer.parseInt(tokenizer.nextToken())));
                cbbFont.setSelectedItem(taMain.getFont().getFontName());
                cbbFontSize.setSelectedIndex(taMain.getFont().getSize() - 8);
                tbtnBold.setSelected(taMain.getFont().getStyle() >= 1);
                tbtnItalic.setSelected(taMain.getFont().getStyle() >= 2);
                return true;
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Can not open file");
                return false;
            }

        }
        return false;
    }

    private void saveToFile() {
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            filePresent = fileChooser.getSelectedFile();
            if (filePresent.getName().indexOf(".txt") == -1 && fileChooser.getFileFilter().equals(new FileNameExtensionFilter("Text Document", "txt"))) {
                filePresent = new File(fileChooser.getSelectedFile().getPath() + ".txt");
            }
            while (filePresent.exists()) {
                int ans = JOptionPane.showConfirmDialog(this, fileChooser.getSelectedFile().getName() + " is already!\nDo you want replace it?", "Save As", JOptionPane.YES_NO_OPTION);
                if (ans == JOptionPane.YES_OPTION) {
                    break;
                } else {
                    result = fileChooser.showSaveDialog(this);
                    if (result == JOptionPane.NO_OPTION) {
                        return;
                    }
                }
            }
            try {
                PrintWriter writer = new PrintWriter(filePresent);
                writer.println(taMain.getText());
                writer.print(taMain.getFont().getFontName() + "/*-*/" + taMain.getFont().getStyle() + "/*-*/" + taMain.getFont().getSize());
                writer.print("/*-*/" + taMain.getBackground().getRed() + "/*-*/" + taMain.getBackground().getGreen() + "/*-*/" + taMain.getBackground().getBlue());
                writer.print("/*-*/" + taMain.getForeground().getRed() + "/*-*/" + taMain.getForeground().getGreen() + "/*-*/" + taMain.getForeground().getBlue());
                writer.close();
                isSaved = true;
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void addFontName() {
        String[] f = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
        for (String x : f) {
            cbbFont.addItem(x);
        }
        cbbFont.setSelectedIndex(2);
    }
    private void mniNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniNewActionPerformed
        int ans = 1;
        if (!isSaved && (!taMain.getText().isEmpty() || filePresent.exists())) {
            ans = JOptionPane.showConfirmDialog(this, "Do you want to save changes to " + filePresent.getName(), "Fake Notepad", JOptionPane.YES_NO_CANCEL_OPTION);
            if (ans == JOptionPane.YES_OPTION) {
                mniSaveActionPerformed(evt);
                this.setTitle(filePresent.getName() + "-Fake Notepad");
            }
        }
        if (ans != JOptionPane.CANCEL_OPTION && ans != JOptionPane.CLOSED_OPTION) {
            taMain.setText("");
            filePresent = new File("Untitled.txt");
            this.setTitle(filePresent.getName() + "-Fake Notepad");
            isSaved = false;
            taMain.setBackground(Color.WHITE);
            taMain.setForeground(Color.BLACK);
            cbbFont.setSelectedIndex(2);
            cbbFontSize.setSelectedIndex(4);
            tbtnBold.setSelected(false);
            tbtnItalic.setSelected(false);
            taMain.setFont(new Font("Arial", 0, 12));
            stackUndo.clear();
            postion = 0;
        }
    }//GEN-LAST:event_mniNewActionPerformed

    private void mniSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSelectAllActionPerformed
        taMain.select(0, taMain.getText().length());
    }//GEN-LAST:event_mniSelectAllActionPerformed

    private void mniDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDeleteActionPerformed
        taMain.replaceSelection("");
    }//GEN-LAST:event_mniDeleteActionPerformed

    private void mniPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPasteActionPerformed
        taMain.paste();
    }//GEN-LAST:event_mniPasteActionPerformed

    private void mniCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniCopyActionPerformed
        taMain.copy();
    }//GEN-LAST:event_mniCopyActionPerformed

    private void mniCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniCutActionPerformed
        taMain.cut();
    }//GEN-LAST:event_mniCutActionPerformed

    private void mniUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniUndoActionPerformed
        if (postion > 1) {
            postion--;
        }
        StringTokenizer tokenizer = new StringTokenizer(stackUndo.elementAt(postion - 1), "/*-*/");
        taMain.setText(tokenizer.nextToken());
        if (taMain.getText().equals("A$A")) {
            taMain.setText("");
        }
        Font font = new Font(tokenizer.nextToken(), Integer.parseInt(tokenizer.nextToken()), Integer.parseInt(tokenizer.nextToken()));
        taMain.setFont(font);
        taMain.setBackground(new Color(Integer.parseInt(tokenizer.nextToken()), Integer.parseInt(tokenizer.nextToken()), Integer.parseInt(tokenizer.nextToken())));
        taMain.setForeground(new Color(Integer.parseInt(tokenizer.nextToken()), Integer.parseInt(tokenizer.nextToken()), Integer.parseInt(tokenizer.nextToken())));
        cbbFont.setSelectedItem(taMain.getFont().getFontName());
        cbbFontSize.setSelectedIndex(taMain.getFont().getSize() - 8);
        tbtnBold.setSelected(taMain.getFont().getStyle() >= 1);
        tbtnItalic.setSelected(taMain.getFont().getStyle() >= 2);
        pmnMain.setVisible(false);
    }//GEN-LAST:event_mniUndoActionPerformed

    private void mniExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExitActionPerformed
        int ans = 1;
        if (!isSaved && (!taMain.getText().isEmpty() || filePresent.exists())) {
            ans = JOptionPane.showConfirmDialog(this, "Do you want to save changes to " + filePresent.getName(), "Fake Notepad", JOptionPane.YES_NO_CANCEL_OPTION);
            if (ans == JOptionPane.YES_OPTION) {
                mniSaveActionPerformed(evt);
            }
        }
        if (ans != JOptionPane.CANCEL_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_mniExitActionPerformed

    private void mniTextColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniTextColorActionPerformed
        ColorChoice choice = new ColorChoice(this, true);
        choice.ccColor.setColor(taMain.getForeground());
        choice.setTitle("Text Color");
        choice.showDialog();
        taMain.setForeground(choice.ccColor.getColor());
    }//GEN-LAST:event_mniTextColorActionPerformed

    private void mniBacgroundColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniBacgroundColorActionPerformed
        ColorChoice choice = new ColorChoice(this, true);
        choice.ccColor.setColor(taMain.getBackground());
        choice.setTitle("Background Color");
        choice.showDialog();
        taMain.setBackground(choice.ccColor.getColor());
    }//GEN-LAST:event_mniBacgroundColorActionPerformed

    private void pmniUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniUndoActionPerformed
        mniUndoActionPerformed(evt);
    }//GEN-LAST:event_pmniUndoActionPerformed

    private void pmniCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniCutActionPerformed
        mniCutActionPerformed(evt);
        pmnMain.setVisible(false);
    }//GEN-LAST:event_pmniCutActionPerformed

    private void pmniCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniCopyActionPerformed
        mniCopyActionPerformed(evt);
        pmnMain.setVisible(false);
    }//GEN-LAST:event_pmniCopyActionPerformed

    private void pmniPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniPasteActionPerformed
        mniPasteActionPerformed(evt);
        pmnMain.setVisible(false);
    }//GEN-LAST:event_pmniPasteActionPerformed

    private void pmniDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniDeleteActionPerformed
        mniDeleteActionPerformed(evt);
        pmnMain.setVisible(false);
    }//GEN-LAST:event_pmniDeleteActionPerformed

    private void pmniSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniSelectAllActionPerformed
        mniSelectAllActionPerformed(evt);
        pmnMain.setVisible(false);
    }//GEN-LAST:event_pmniSelectAllActionPerformed

    private void taMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_taMainMouseClicked
        if (evt.getButton() == 3) {
            pmnMain.setLocation(evt.getXOnScreen(), evt.getYOnScreen());
            pmnMain.setVisible(true);
        } else {
            pmnMain.setVisible(false);
        }

    }//GEN-LAST:event_taMainMouseClicked

    private void pmnMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pmnMainMouseClicked
        pmnMain.setVisible(false);
    }//GEN-LAST:event_pmnMainMouseClicked

    private void mniFindAndReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniFindAndReplaceActionPerformed
        FindAndReplace findAndReplace = new FindAndReplace(this, false);
        findAndReplace.showFindAndReplace();
    }//GEN-LAST:event_mniFindAndReplaceActionPerformed

    private void pmniFindAndReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniFindAndReplaceActionPerformed
        mniFindAndReplaceActionPerformed(evt);
        pmnMain.setVisible(false);
    }//GEN-LAST:event_pmniFindAndReplaceActionPerformed

    private void taMainKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taMainKeyTyped
        isSaved = false;
    }//GEN-LAST:event_taMainKeyTyped

    private void mniFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniFontActionPerformed
        tbFont.setVisible(mniFont.isSelected());
    }//GEN-LAST:event_mniFontActionPerformed

    private void cbbFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbFontActionPerformed
        taMain.setFont(new Font((String) cbbFont.getSelectedItem(), taMain.getFont().getStyle(), taMain.getFont().getSize()));
    }//GEN-LAST:event_cbbFontActionPerformed

    private void cbbFontSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbFontSizeActionPerformed
        taMain.setFont(new Font(taMain.getFont().getFontName(), taMain.getFont().getStyle(), Integer.parseInt((String) cbbFontSize.getSelectedItem())));
    }//GEN-LAST:event_cbbFontSizeActionPerformed

    private void tbtnItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtnItalicActionPerformed
        if (taMain.getFont().isItalic()) {
            Font font = taMain.getFont();
            taMain.setFont(font.deriveFont(taMain.getFont().getStyle() - Font.ITALIC));
        } else {
            Font font = taMain.getFont();
            taMain.setFont(font.deriveFont(taMain.getFont().getStyle() + Font.ITALIC));
        }
    }//GEN-LAST:event_tbtnItalicActionPerformed

    private void mniSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveActionPerformed
        if (filePresent.exists()) {
            try {
                PrintWriter writer = new PrintWriter(filePresent);
                writer.println(taMain.getText());
                writer.print("/*-*/" + taMain.getFont().getFontName() + "/*-*/" + taMain.getFont().getStyle() + "/*-*/" + taMain.getFont().getSize());
                writer.print("/*-*/" + taMain.getBackground().getRed() + "/*-*/" + taMain.getBackground().getGreen() + "/*-*/" + taMain.getBackground().getBlue());
                writer.print("/*-*/" + taMain.getForeground().getRed() + "/*-*/" + taMain.getForeground().getGreen() + "/*-*/" + taMain.getForeground().getBlue());
                writer.close();
                isSaved = true;
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            if (!isSaved) {
                saveToFile();
                this.setTitle(filePresent.getName() + "-Fake Notepad");
                isSaved = true;
            }
        }
    }//GEN-LAST:event_mniSaveActionPerformed

    private void mniSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveAsActionPerformed
        saveToFile();
        this.setTitle(filePresent.getName() + "-Fake Notepad");
    }//GEN-LAST:event_mniSaveAsActionPerformed

    private void mniOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniOpenActionPerformed
        int ans = 1;
        if (!isSaved && (!taMain.getText().isEmpty() || filePresent.exists())) {
            ans = JOptionPane.showConfirmDialog(this, "Do you want to save changes to " + filePresent.getName(), "Fake Notepad", JOptionPane.YES_NO_CANCEL_OPTION);
            if (ans == JOptionPane.YES_OPTION) {
                mniSaveActionPerformed(evt);
                this.setTitle(filePresent.getName() + "-Fake Notepad");
            }
        }
        if (ans != JOptionPane.CANCEL_OPTION && ans != JOptionPane.CLOSED_OPTION) {
            if (!openFromFile()) {
                filePresent = new File("Untitled.txt");
                taMain.setText("");
                mniNewActionPerformed(evt);
                return;
            }
            this.setTitle(filePresent.getName() + "-Fake Notepad");
            stackUndo.clear();
            postion = 0;
            isSaved = true;
        }
    }//GEN-LAST:event_mniOpenActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int ans = JOptionPane.NO_OPTION;
        if (!isSaved && (!taMain.getText().isEmpty() || filePresent.exists())) {
            ans = JOptionPane.showConfirmDialog(this, "Do you want to save changes to " + filePresent.getName(), "Fake Notepad", JOptionPane.YES_NO_CANCEL_OPTION);
            if (ans == JOptionPane.YES_OPTION) {
                mniSaveActionPerformed(null);
                this.setTitle(filePresent.getName() + "-Fake Notepad");
            }
        }
        if (ans == JOptionPane.CANCEL_OPTION && ans != JOptionPane.CLOSED_OPTION) {
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        } else {
            this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
    }//GEN-LAST:event_formWindowClosing

    private void mniRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRedoActionPerformed
        if (postion < stackUndo.size()) {
            StringTokenizer tokenizer = new StringTokenizer(stackUndo.elementAt(postion), "/*-*/");
            taMain.setText(tokenizer.nextToken());
            if (taMain.getText().equals("A$A")) {
                taMain.setText("");
            }
            Font font = new Font(tokenizer.nextToken(), Integer.parseInt(tokenizer.nextToken()), Integer.parseInt(tokenizer.nextToken()));
            taMain.setFont(font);
            taMain.setBackground(new Color(Integer.parseInt(tokenizer.nextToken()), Integer.parseInt(tokenizer.nextToken()), Integer.parseInt(tokenizer.nextToken())));
            taMain.setForeground(new Color(Integer.parseInt(tokenizer.nextToken()), Integer.parseInt(tokenizer.nextToken()), Integer.parseInt(tokenizer.nextToken())));
            cbbFont.setSelectedItem(taMain.getFont().getFontName());
            cbbFontSize.setSelectedIndex(taMain.getFont().getSize() - 8);
            tbtnBold.setSelected(taMain.getFont().getStyle() >= 1);
            tbtnItalic.setSelected(taMain.getFont().getStyle() >= 2);
            postion++;
        }
        pmnMain.setVisible(false);
    }//GEN-LAST:event_mniRedoActionPerformed

    private void pmniRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmniRedoActionPerformed
        mniRedoActionPerformed(evt);
    }//GEN-LAST:event_pmniRedoActionPerformed

    private void mniWordWrapStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mniWordWrapStateChanged
        taMain.setLineWrap(mniWordWrap.isSelected());
        taMain.setWrapStyleWord(mniWordWrap.isSelected());
    }//GEN-LAST:event_mniWordWrapStateChanged

    private void tbtnBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtnBoldActionPerformed
        if (taMain.getFont().isBold()) {
            Font font = taMain.getFont();
            taMain.setFont(font.deriveFont(taMain.getFont().getStyle() - Font.BOLD));
        } else {
            Font font = taMain.getFont();
            taMain.setFont(font.deriveFont(taMain.getFont().getStyle() + Font.BOLD));
        }
    }//GEN-LAST:event_tbtnBoldActionPerformed

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        pmnMain.setVisible(false);
    }//GEN-LAST:event_formWindowLostFocus

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
        pmnMain.setVisible(false);    // TODO add your handling code here:
    }//GEN-LAST:event_formComponentMoved

    private void mbMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mbMainMouseClicked
        pmnMain.setVisible(false);            // TODO add your handling code here:
    }//GEN-LAST:event_mbMainMouseClicked

    private void tbFontMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbFontMouseClicked
        pmnMain.setVisible(false);            // TODO add your handling code here:
    }//GEN-LAST:event_tbFontMouseClicked

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        pmnMain.setVisible(false);            // TODO add your handling code here:
    }//GEN-LAST:event_formWindowStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbbFont;
    private javax.swing.JComboBox<String> cbbFontSize;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JMenuBar mbMain;
    private javax.swing.JMenu mnEdit;
    private javax.swing.JMenu mnFile;
    private javax.swing.JMenu mnFormat;
    private javax.swing.JMenuItem mniBacgroundColor;
    private javax.swing.JMenuItem mniCopy;
    private javax.swing.JMenuItem mniCut;
    private javax.swing.JMenuItem mniDelete;
    private javax.swing.JMenuItem mniExit;
    private javax.swing.JMenuItem mniFindAndReplace;
    private javax.swing.JCheckBoxMenuItem mniFont;
    private javax.swing.JMenuItem mniNew;
    private javax.swing.JMenuItem mniOpen;
    private javax.swing.JMenuItem mniPaste;
    private javax.swing.JMenuItem mniRedo;
    private javax.swing.JMenuItem mniSave;
    private javax.swing.JMenuItem mniSaveAs;
    private javax.swing.JMenuItem mniSelectAll;
    private javax.swing.JMenuItem mniTextColor;
    private javax.swing.JMenuItem mniUndo;
    private javax.swing.JCheckBoxMenuItem mniWordWrap;
    private javax.swing.JPopupMenu pmnMain;
    private javax.swing.JMenuItem pmniCopy;
    private javax.swing.JMenuItem pmniCut;
    private javax.swing.JMenuItem pmniDelete;
    private javax.swing.JMenuItem pmniFindAndReplace;
    private javax.swing.JMenuItem pmniPaste;
    private javax.swing.JMenuItem pmniRedo;
    private javax.swing.JMenuItem pmniSelectAll;
    private javax.swing.JMenuItem pmniUndo;
    public javax.swing.JTextArea taMain;
    private javax.swing.JToolBar tbFont;
    private javax.swing.JToggleButton tbtnBold;
    private javax.swing.JToggleButton tbtnItalic;
    // End of variables declaration//GEN-END:variables
}
